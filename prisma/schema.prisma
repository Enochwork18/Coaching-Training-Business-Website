// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(EDITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  EDITOR
}

model Service {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  category    String
  excerpt     String
  description String        @db.Text
  duration    String?
  price       String?
  included    String[]
  whoFor      String?       @db.Text
  image       String?
  published   Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  bookings    Booking[]
  testimonials Testimonial[]
}

model BlogPost {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  excerpt     String
  content     String     @db.Text
  image       String?
  author      String     @default("Elizabeth Omolara")
  category    String[]
  tags        String[]
  readTime    Int
  published   Boolean    @default(false)
  scheduledAt DateTime?
  publishedAt DateTime?
  metaTitle   String?
  metaDesc    String?
  metaKeywords String[]
  views       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Testimonial {
  id          String    @id @default(cuid())
  name        String
  quote       String    @db.Text
  rating      Int       @default(5)
  service     Service?  @relation(fields: [serviceId], references: [id])
  serviceId   String?
  photo       String?
  approved    Boolean   @default(false)
  displayOrder Int      @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id          String    @id @default(cuid())
  name        String
  email       String
  phone       String
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   String
  date        DateTime
  time        String
  message     String?   @db.Text
  status      BookingStatus @default(PENDING)
  payment     Payment?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Payment {
  id          String    @id @default(cuid())
  booking     Booking   @relation(fields: [bookingId], references: [id])
  bookingId   String    @unique
  provider    String
  txnId       String    @unique
  amount      Float
  currency    String
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model GalleryItem {
  id          String    @id @default(cuid())
  title       String
  description String?
  image       String
  category    String
  featured    Boolean   @default(false)
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Subscriber {
  id          String    @id @default(cuid())
  email       String    @unique
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ContactSubmission {
  id        String    @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String    @db.Text
  createdAt DateTime  @default(now())
}